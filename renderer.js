// renderer.js - PHI√äN B·∫¢N M·ªöI HO√ÄN TO√ÄN V·ªöI HI·ªÜU ·ª®NG N√öT V√Ä TOAST
class AuthApp {
  constructor() {
    this.currentScreen = "welcomeScreen";
    this.licenseInterval = null;
    this.countdownInterval = null;
    this.currentUser = null;
    this.userLicenseInfo = null;
    this.resetToken = null;
    this.init();
  }

  // === PH∆Ø∆†NG TH·ª®C M·ªöI CHO HI·ªÜU ·ª®NG ===
  showToast(message, type = "info", duration = 5000) {
    const toastContainer = document.getElementById("toastContainer");
    if (!toastContainer) return;

    const toast = document.createElement("div");
    toast.className = `toast ${type}`;
    
    const icons = {
      success: "fas fa-check-circle",
      error: "fas fa-exclamation-circle",
      warning: "fas fa-exclamation-triangle",
      info: "fas fa-info-circle",
      loading: "fas fa-spinner fa-spin"
    };

    toast.innerHTML = `
      <i class="${icons[type] || icons.info}"></i>
      <span>${message}</span>
    `;

    toastContainer.appendChild(toast);

    // T·ª± ƒë·ªông x√≥a toast sau duration
    if (type !== 'loading') {
      setTimeout(() => {
        toast.classList.add('fade-out');
        setTimeout(() => {
          if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
          }
        }, 300);
      }, duration);
    }

    return toast;
  }

  removeToast(toast) {
    if (toast && toast.parentNode) {
      toast.classList.add('fade-out');
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }
  }

  // H√†m th√™m hi·ªáu ·ª©ng loading cho n√∫t
  setButtonLoading(button, isLoading) {
    if (!button) return;
    
    if (isLoading) {
      button.classList.add('btn-loading');
      button.disabled = true;
    } else {
      button.classList.remove('btn-loading');
      button.disabled = false;
    }
  }

  async init() {
    console.log("[SYSTEM] ƒêang kh·ªüi t·∫°o ·ª©ng d·ª•ng...");
    await this.loadAppInfo();
    this.setupEventListeners();
    this.showScreen("welcomeScreen");
    this.showToast("H·ªá th·ªëng ƒë√£ s·∫µn s√†ng", "success");
  }

  async loadAppInfo() {
    try {
      const appInfo = await window.electronAPI.getAppInfo();
      console.log("[SYSTEM] Th√¥ng tin ·ª©ng d·ª•ng:", appInfo);
      document.getElementById("appInfo").innerHTML = `
        <i class="fas fa-desktop"></i>
        <span>${appInfo.name} v${appInfo.version} - ${this.getPlatformName(appInfo.platform)}</span>
      `;
    } catch (error) {
      console.error("L·ªói khi t·∫£i th√¥ng tin ·ª©ng d·ª•ng:", error);
      document.getElementById("appInfo").innerHTML = `
        <i class="fas fa-exclamation-triangle"></i>
        <span>Kh√¥ng th·ªÉ t·∫£i th√¥ng tin h·ªá th·ªëng</span>
      `;
    }
  }

  getPlatformName(platform) {
    const platforms = { 
      win32: "Windows", 
      darwin: "macOS", 
      linux: "Linux" 
    };
    return platforms[platform] || platform;
  }

  setupEventListeners() {
    console.log("[SYSTEM] ƒêang thi·∫øt l·∫≠p s·ª± ki·ªán...");
    
    // Welcome screen
    document.getElementById("getStartedBtn")?.addEventListener("click", () => {
      this.showScreen("loginForm");
      this.showToast("Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p", "info");
    });
    
    // Navigation
    document.getElementById("showRegister")?.addEventListener("click", e => { 
      e.preventDefault(); 
      this.showScreen("registerForm"); 
      this.showToast("Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng k√Ω", "info");
    });
    
    document.getElementById("showLogin")?.addEventListener("click", e => { 
      e.preventDefault(); 
      this.showScreen("loginForm"); 
      this.showToast("Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p", "info");
    });

    // Forgot Password Navigation
    document.getElementById("showForgotPassword")?.addEventListener("click", e => {
      e.preventDefault();
      this.showScreen("forgotPasswordScreen");
      this.showToast("Trang qu√™n m·∫≠t kh·∫©u", "info");
    });

    document.getElementById("showLoginFromForgot")?.addEventListener("click", e => {
      e.preventDefault();
      this.showScreen("loginForm");
      this.showToast("Quay l·∫°i ƒëƒÉng nh·∫≠p", "info");
    });

    document.getElementById("showForgotFromReset")?.addEventListener("click", e => {
      e.preventDefault();
      this.showScreen("forgotPasswordScreen");
      this.showToast("G·ª≠i l·∫°i m√£ x√°c th·ª±c", "info");
    });
    
    document.getElementById("logoutBtn")?.addEventListener("click", () => this.handleLogout());

    // Forms
    document.getElementById("loginFormElement")?.addEventListener("submit", e => { 
      e.preventDefault(); 
      this.handleLogin(); 
    });
    
    document.getElementById("registerFormElement")?.addEventListener("submit", e => { 
      e.preventDefault(); 
      this.handleRegister(); 
    });

    // Forgot Password Forms
    document.getElementById("forgotPasswordForm")?.addEventListener("submit", e => {
      e.preventDefault();
      this.handleForgotPassword();
    });

    document.getElementById("resetPasswordForm")?.addEventListener("submit", e => {
      e.preventDefault();
      this.handleResetPassword();
    });

    // License verification
    document.getElementById("btnVerify")?.addEventListener("click", () => this.handleVerifyKey());
    document.getElementById("licenseKey")?.addEventListener("keypress", e => { 
      if (e.key === "Enter") this.handleVerifyKey(); 
    });

    // Contact admin buttons
    document.getElementById("btnContactAdmin")?.addEventListener("click", () => this.showContactModal());
    document.getElementById("contactZalo")?.addEventListener("click", () => this.contactAdminZalo());
    document.getElementById("contactClose")?.addEventListener("click", () => this.hideContactModal());

    // Back to login from license screen
    document.getElementById("btnBackToLogin")?.addEventListener("click", () => {
      this.showScreen("loginForm");
      this.showToast("Quay l·∫°i trang ƒëƒÉng nh·∫≠p", "info");
    });

    // Modal close events
    document.querySelector(".modal-close")?.addEventListener("click", () => this.hideContactModal());
    
    // Close modal when clicking outside
    document.getElementById("contactModal")?.addEventListener("click", (e) => {
      if (e.target.id === "contactModal") {
        this.hideContactModal();
      }
    });
  }

  // ========== QU√äN M·∫¨T KH·∫®U ==========
  async handleForgotPassword() {
    const email = document.getElementById("forgotEmail").value.trim();
    const submitBtn = this.getSubmitButton(document.getElementById("forgotPasswordForm"));
    
    if (!email) {
      this.showToast("‚ùå Vui l√≤ng nh·∫≠p email ƒëƒÉng k√Ω", "error");
      return;
    }

    if (!this.isValidEmail(email)) {
      this.showToast("‚ùå ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá", "error");
      return;
    }

    this.setButtonLoading(submitBtn, true);
    const loadingToast = this.showToast("üìß ƒêang g·ª≠i y√™u c·∫ßu reset m·∫≠t kh·∫©u...", "loading");

    try {
      const result = await window.electronAPI.forgotPassword({ email });
      
      if (result && result.success) {
        this.removeToast(loadingToast);
        this.showToast("‚úÖ ƒê√£ g·ª≠i email h∆∞·ªõng d·∫´n reset m·∫≠t kh·∫©u", "success");
        
        // L∆∞u email ƒë·ªÉ s·ª≠ d·ª•ng trong reset password
        this.resetEmail = email;
        
        // Chuy·ªÉn ƒë·∫øn m√†n h√¨nh reset password sau 2 gi√¢y
        setTimeout(() => {
          this.showScreen("resetPasswordScreen");
          this.showToast("Vui l√≤ng ki·ªÉm tra email v√† nh·∫≠p m√£ x√°c th·ª±c", "info");
        }, 2000);
        
      } else {
        this.removeToast(loadingToast);
        this.showToast(`‚ùå ${result?.message || "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng"}`, "error");
      }
    } catch (error) {
      console.error("[FORGOT PASSWORD] Error:", error);
      this.removeToast(loadingToast);
      this.showToast("‚ùå L·ªói k·∫øt n·ªëi server, vui l√≤ng th·ª≠ l·∫°i", "error");
    } finally {
      this.setButtonLoading(submitBtn, false);
    }
  }

  async handleResetPassword() {
    const resetToken = document.getElementById("resetToken").value.trim();
    const newPassword = document.getElementById("newPassword").value.trim();
    const confirmPassword = document.getElementById("confirmPassword").value.trim();
    const submitBtn = this.getSubmitButton(document.getElementById("resetPasswordForm"));

    // Validation
    if (!resetToken || !newPassword || !confirmPassword) {
      this.showToast("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin", "error");
      return;
    }

    if (newPassword.length < 8) {
      this.showToast("‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±", "error");
      return;
    }

    if (newPassword !== confirmPassword) {
      this.showToast("‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp", "error");
      return;
    }

    this.setButtonLoading(submitBtn, true);
    const loadingToast = this.showToast("üîê ƒêang ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u...", "loading");

    try {
      const result = await window.electronAPI.resetPassword({
        email: this.resetEmail,
        resetToken: resetToken,
        newPassword: newPassword
      });

      if (result && result.success) {
        this.removeToast(loadingToast);
        this.showToast("‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!", "success");
        
        // Reset form
        document.getElementById("resetToken").value = "";
        document.getElementById("newPassword").value = "";
        document.getElementById("confirmPassword").value = "";
        
        // Chuy·ªÉn v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p sau 2 gi√¢y
        setTimeout(() => {
          this.showScreen("loginForm");
          this.showToast("Vui l√≤ng ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi", "success");
        }, 2000);
        
      } else {
        this.removeToast(loadingToast);
        this.showToast(`‚ùå ${result?.message || "M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n"}`, "error");
      }
    } catch (error) {
      console.error("[RESET PASSWORD] Error:", error);
      this.removeToast(loadingToast);
      this.showToast("‚ùå L·ªói k·∫øt n·ªëi server, vui l√≤ng th·ª≠ l·∫°i", "error");
    } finally {
      this.setButtonLoading(submitBtn, false);
    }
  }

  // H√†m helper ƒë·ªÉ l·∫•y n√∫t submit t·ª´ form
  getSubmitButton(form) {
    return form?.querySelector('button[type="submit"]') || form?.querySelector('.btn-primary');
  }

  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  showContactModal() {
    const modal = document.getElementById("contactModal");
    modal.style.display = "block";
    this.showToast("ƒêang m·ªü th√¥ng tin li√™n h·ªá Admin", "info");
  }

  hideContactModal() {
    const modal = document.getElementById("contactModal");
    modal.style.display = "none";
  }

  contactAdminZalo() {
    const phoneNumber = "0365798789";
    const message = "Xin ch√†o Admin, t√¥i c·∫ßn ƒë∆∞·ª£c h·ªó tr·ª£ v·ªÅ License Key cho t√†i kho·∫£n SecureAuth Pro.";
    const zaloUrl = `https://zalo.me/${phoneNumber}?text=${encodeURIComponent(message)}`;
    
    window.open(zaloUrl, '_blank');
    this.showToast("üìû ƒêang m·ªü Zalo li√™n h·ªá Admin...", "info");
    this.hideContactModal();
    
    // Auto close after 3 seconds
    setTimeout(() => {
      this.showToast("ƒê√£ m·ªü Zalo th√†nh c√¥ng", "success");
    }, 3000);
  }

  handleLogout() {
    console.log("[SYSTEM] ƒêang ƒëƒÉng xu·∫•t...");
    
    // Clear intervals
    if (this.licenseInterval) {
      clearInterval(this.licenseInterval);
      this.licenseInterval = null;
    }
    if (this.countdownInterval) {
      clearInterval(this.countdownInterval);
      this.countdownInterval = null;
    }
    
    // Reset user data
    this.currentUser = null;
    this.userLicenseInfo = null;
    this.resetToken = null;
    this.resetEmail = null;
    
    // Show logout message
    this.showToast("‚úÖ ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng", "success");
    
    // Clear form fields
    document.getElementById("loginUser").value = "";
    document.getElementById("loginPass").value = "";
    document.getElementById("licenseKey").value = "";
    document.getElementById("forgotEmail").value = "";
    document.getElementById("resetToken").value = "";
    document.getElementById("newPassword").value = "";
    document.getElementById("confirmPassword").value = "";
    
    // Return to login screen after delay
    setTimeout(() => {
      this.showScreen("loginForm");
    }, 1500);
  }

  showScreen(screenName) {
    console.log("[NAVIGATION] Chuy·ªÉn ƒë·∫øn m√†n h√¨nh:", screenName);
    
    // ·∫®n t·∫•t c·∫£ m√†n h√¨nh
    const screens = document.querySelectorAll(".screen");
    screens.forEach(screen => {
      screen.classList.remove("active");
    });
    
    // Hi·ªÉn th·ªã m√†n h√¨nh ƒë√≠ch
    const targetScreen = document.getElementById(screenName);
    if (targetScreen) {
      targetScreen.classList.add("active");
      this.currentScreen = screenName;
    }
  }

  async handleLogin() {
    const username = document.getElementById("loginUser").value.trim();
    const password = document.getElementById("loginPass").value.trim();
    const loginBtn = document.getElementById("loginBtn");
    
    // Validation
    if (!username || !password) {
      this.showToast("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u", "error");
      return;
    }

    // Th√™m hi·ªáu ·ª©ng loading
    this.setButtonLoading(loginBtn, true);
    const loadingToast = this.showToast("üîê ƒêang x√°c th·ª±c th√¥ng tin ƒëƒÉng nh·∫≠p...", "loading");

    try {
      // L·∫•y IP th·ª±c t·∫ø
      let ip = "unknown";
      try {
        const ipResponse = await fetch("https://api.ipify.org?format=json", { timeout: 5000 });
        if (ipResponse.ok) {
          const ipData = await ipResponse.json();
          ip = ipData.ip;
        }
      } catch (ipError) {
        console.warn("Kh√¥ng th·ªÉ l·∫•y ƒë·ªãa ch·ªâ IP:", ipError);
      }

      const machineId = await window.electronAPI.getMachineId();
      console.log("[LOGIN] G·ª≠i d·ªØ li·ªáu ƒëƒÉng nh·∫≠p:", { username, machineId, ip });

      const result = await window.electronAPI.login({ 
        user: username, 
        pass: password, 
        mid: machineId, 
        ip: ip 
      });
      
      console.log("[LOGIN] K·∫øt qu·∫£ ƒëƒÉng nh·∫≠p:", result);

      if (!result || !result.success) {
        const errorMessage = result?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i do l·ªói server";
        this.removeToast(loadingToast);
        this.showToast(`‚ùå ${errorMessage}`, "error");
        return;
      }

      // Ki·ªÉm tra n·∫øu t√†i kho·∫£n ch∆∞a c√≥ license
      if (result.success && !result.token) {
        this.removeToast(loadingToast);
        this.showToast("‚ö†Ô∏è T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t License", "warning");
        
        // Hi·ªÉn th·ªã modal th√¥ng b√°o
        setTimeout(() => {
          this.showScreen("licenseCard");
          this.showToast("Vui l√≤ng nh·∫≠p License Key ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n", "warning");
        }, 2000);
        
        return;
      }

      // X√°c th·ª±c ch·ªØ k√Ω s·ªë
      if (!result.signature) {
        this.removeToast(loadingToast);
        this.showToast("‚ùå L·ªói b·∫£o m·∫≠t: Kh√¥ng c√≥ ch·ªØ k√Ω x√°c th·ª±c", "error");
        return;
      }

      console.log("[SECURITY] ƒêang x√°c th·ª±c ch·ªØ k√Ω s·ªë...");
      const signatureVerified = await window.electronAPI.verifySignature(result.token, result.signature);
      console.log("[SECURITY] K·∫øt qu·∫£ x√°c th·ª±c ch·ªØ k√Ω:", signatureVerified);
      
      if (!signatureVerified) {
        this.removeToast(loadingToast);
        this.showToast("‚ùå L·ªói b·∫£o m·∫≠t: Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá", "error");
        return;
      }

      // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
      const currentTime = Math.floor(Date.now() / 1000);
      
      if (result.blocked) {
        this.removeToast(loadingToast);
        this.showToast("‚õî T√†i kho·∫£n ƒë√£ b·ªã kh√≥a, vui l√≤ng li√™n h·ªá Admin", "error");
        return;
      }

      if (currentTime >= Number(result.exp)) {
        this.removeToast(loadingToast);
        this.showToast("‚è∞ License ƒë√£ h·∫øt h·∫°n, vui l√≤ng gia h·∫°n", "warning");
        setTimeout(() => this.showScreen("licenseCard"), 2000);
        return;
      }

      // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
      this.currentUser = username;
      this.userLicenseInfo = {
        exp: Number(result.exp),
        token: result.token,
        signature: result.signature,
        blocked: result.blocked
      };

      this.removeToast(loadingToast);
      this.showToast("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...", "success");

      // B·∫Øt ƒë·∫ßu gi√°m s√°t license
      this.startLicenseMonitor(this.userLicenseInfo, machineId, username);
      
      // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c th·ªùi gian
      this.startCountdown(Number(result.exp), result.blocked);
      
      // C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi d√πng tr√™n dashboard
      document.getElementById("welcomeUserName").textContent = username;

      // Chuy·ªÉn ƒë·∫øn dashboard sau 2 gi√¢y
      setTimeout(() => {
        this.showScreen("mainApp");
        this.showToast(`Ch√†o m·ª´ng ${username} ƒë·∫øn v·ªõi SecureAuth Pro!`, "success");
      }, 2000);
      
    } catch (error) {
      console.error("[LOGIN] L·ªói ƒëƒÉng nh·∫≠p:", error);
      this.removeToast(loadingToast);
      this.showToast("‚ùå L·ªói k·∫øt n·ªëi m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i", "error");
    } finally {
      // T·∫Øt hi·ªáu ·ª©ng loading
      this.setButtonLoading(loginBtn, false);
    }
  }

  async handleRegister() {
    const username = document.getElementById("regUser").value.trim();
    const password = document.getElementById("regPass").value.trim();
    const email = document.getElementById("regEmail").value.trim();
    const phone = document.getElementById("regPhone").value.trim();
    const country = document.getElementById("regCountry").value;
    const registerBtn = document.getElementById("registerBtn");

    // Validation
    if (!username || !password || !email) {
      this.showToast("‚ùå Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc", "error");
      return;
    }

    if (username.length < 6) {
      this.showToast("‚ùå T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±", "error");
      return;
    }

    if (password.length < 8) {
      this.showToast("‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±", "error");
      return;
    }

    if (!this.isValidEmail(email)) {
      this.showToast("‚ùå ƒê·ªãa ch·ªâ email kh√¥ng h·ª£p l·ªá", "error");
      return;
    }

    this.setButtonLoading(registerBtn, true);
    const loadingToast = this.showToast("üìù ƒêang x·ª≠ l√Ω ƒëƒÉng k√Ω t√†i kho·∫£n...", "loading");

    try {
      const machineId = await window.electronAPI.getMachineId();
      const result = await window.electronAPI.register({ 
        user: username, 
        pass: password, 
        email: email, 
        phone: phone, 
        country: country, 
        mid: machineId 
      });
      
      console.log("[REGISTER] K·∫øt qu·∫£ ƒëƒÉng k√Ω:", result);

      if (result && result.success) {
        this.removeToast(loadingToast);
        this.showToast("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ nh·∫≠n License Key", "success");
        
        // T·ª± ƒë·ªông ƒëi·ªÅn username v√† chuy·ªÉn ƒë·∫øn m√†n h√¨nh license
        setTimeout(() => {
          this.showScreen("licenseCard");
          document.getElementById("loginUser").value = username;
          this.showToast("Vui l√≤ng nh·∫≠p License Key ƒë∆∞·ª£c g·ª≠i qua email", "info");
        }, 3000);
        
      } else {
        const errorMessage = result?.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i";
        this.removeToast(loadingToast);
        this.showToast(`‚ùå ${errorMessage}`, "error");
      }
    } catch (error) {
      console.error("[REGISTER] L·ªói ƒëƒÉng k√Ω:", error);
      this.removeToast(loadingToast);
      this.showToast("‚ùå L·ªói k·∫øt n·ªëi m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i", "error");
    } finally {
      this.setButtonLoading(registerBtn, false);
    }
  }

  async handleVerifyKey() {
  const keyInput = document.getElementById("licenseKey");
  const keyStatus = document.getElementById("licenseStatus");
  const verifyBtn = document.getElementById("btnVerify");
  
  if (!keyInput || !keyStatus) {
    console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ license key");
    return;
  }
  
  const licenseKey = keyInput.value.trim();
  
  if (!licenseKey) {
    keyStatus.innerHTML = '<div class="status-message error">‚ùå Vui l√≤ng nh·∫≠p License Key</div>';
    return;
  }

  if (licenseKey.length < 50) {
    keyStatus.innerHTML = '<div class="status-message error">‚ùå License Key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng</div>';
    return;
  }

  this.setButtonLoading(verifyBtn, true);
  keyStatus.innerHTML = '<div class="status-message"><i class="fas fa-spinner fa-spin"></i> üîê ƒêang x√°c th·ª±c License Key...</div>';

  try {
    const machineId = await window.electronAPI.getMachineId();
    const result = await window.electronAPI.verifyKey({ 
      key: licenseKey, 
      mid: machineId 
    });
    
    console.log("[LICENSE] K·∫øt qu·∫£ x√°c th·ª±c:", result);

    if (result && result.success) {
      this.currentUser = result.user || "Ng∆∞·ªùi d√πng";

      // Ki·ªÉm tra ch·ªØ k√Ω s·ªë
      if (!result.signature) {
        keyStatus.innerHTML = '<div class="status-message error">‚ùå License kh√¥ng c√≥ ch·ªØ k√Ω b·∫£o m·∫≠t</div>';
        return;
      }

      // X√°c th·ª±c ch·ªØ k√Ω
      const signatureVerified = await window.electronAPI.verifySignature(result.token, result.signature);
      console.log("[SECURITY] K·∫øt qu·∫£ x√°c th·ª±c ch·ªØ k√Ω license:", signatureVerified);
      
      if (!signatureVerified) {
        keyStatus.innerHTML = '<div class="status-message error">‚ùå C·∫£nh b√°o b·∫£o m·∫≠t: License gi·∫£ m·∫°o!</div>';
        return;
      }

      // Ki·ªÉm tra tr·∫°ng th√°i license
      const currentTime = Math.floor(Date.now() / 1000);
      
      if (result.blocked) {
        keyStatus.innerHTML = '<div class="status-message error">‚õî License ƒë√£ b·ªã kh√≥a</div>';
        return;
      }

      if (currentTime >= Number(result.exp)) {
        keyStatus.innerHTML = '<div class="status-message error">‚è∞ License ƒë√£ h·∫øt h·∫°n</div>';
        return;
      }

      // ‚úÖ License h·ª£p l·ªá
      this.userLicenseInfo = {
        exp: Number(result.exp),
        token: result.token,
        signature: result.signature,
        blocked: result.blocked
      };

      // üîë B·∫Øt ƒë·∫ßu gi√°m s√°t v√† ƒë·∫øm ng∆∞·ª£c gi·ªëng login
      this.startLicenseMonitor(this.userLicenseInfo, machineId, this.currentUser);
      this.startCountdown(Number(result.exp), result.blocked);

      // C·∫≠p nh·∫≠t t√™n user
      document.getElementById("welcomeUserName").textContent = this.currentUser;

      keyStatus.innerHTML = '<div class="status-message success">‚úÖ üéâ K√≠ch ho·∫°t License th√†nh c√¥ng!</div>';
      this.showToast("‚úÖ License ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng", "success");

      // Chuy·ªÉn ƒë·∫øn dashboard sau 2 gi√¢y
      setTimeout(() => { 
        this.showScreen("mainApp"); 
        keyStatus.innerHTML = ""; 
        this.showToast(`Ch√†o m·ª´ng ${this.currentUser} ƒë·∫øn v·ªõi SecureAuth Pro!`, "success");
      }, 2000);
      
    } else {
      const errorMessage = result?.message || "License Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng";
      keyStatus.innerHTML = `<div class="status-message error">‚ùå ${errorMessage}</div>`;
      setTimeout(() => (keyStatus.innerHTML = ""), 5000);
    }
  } catch (error) {
    console.error("[LICENSE] L·ªói x√°c th·ª±c:", error);
    keyStatus.innerHTML = '<div class="status-message error">‚ùå L·ªói k·∫øt n·ªëi m√°y ch·ªß x√°c th·ª±c</div>';
  } finally {
    this.setButtonLoading(verifyBtn, false);
  }
}


  startCountdown(expirationTime, isBlocked) {
    // D·ª´ng b·ªô ƒë·∫øm ng∆∞·ª£c c≈© n·∫øu c√≥
    if (this.countdownInterval) {
      clearInterval(this.countdownInterval);
    }
    
    const licenseInfoElement = document.getElementById("licenseInfo");
    if (!licenseInfoElement) {
      console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã th√¥ng tin license");
      return;
    }

    const updateCountdown = () => {
      const currentTime = Math.floor(Date.now() / 1000);
      const timeRemaining = expirationTime - currentTime;
      
      if (timeRemaining <= 0 || isBlocked) {
        licenseInfoElement.innerHTML = `
          <div class="license-info-expired">
            <p><strong>üìõ Tr·∫°ng th√°i:</strong> ‚õî ƒê√£ h·∫øt h·∫°n ho·∫∑c b·ªã kh√≥a</p>
            <p><strong>üïí Th·ªùi gian:</strong> License kh√¥ng c√≤n hi·ªáu l·ª±c</p>
            <p><strong>üí° H∆∞·ªõng d·∫´n:</strong> Vui l√≤ng li√™n h·ªá Admin ƒë·ªÉ gia h·∫°n</p>
          </div>
        `;
        
        if (this.countdownInterval) {
          clearInterval(this.countdownInterval);
          this.countdownInterval = null;
        }
        return;
      }
      
      // T√≠nh to√°n th·ªùi gian c√≤n l·∫°i
      const days = Math.floor(timeRemaining / 86400);
      const hours = Math.floor((timeRemaining % 86400) / 3600);
      const minutes = Math.floor((timeRemaining % 3600) / 60);
      const seconds = timeRemaining % 60;
      
      licenseInfoElement.innerHTML = `
        <div class="license-info-active">
          <p><strong>‚úÖ Tr·∫°ng th√°i:</strong> ƒêang ho·∫°t ƒë·ªông</p>
          <p><strong>‚è∞ Th·ªùi gian c√≤n l·∫°i:</strong> ${days} ng√†y ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}</p>
          <p><strong>üîí B·∫£o m·∫≠t:</strong> ƒê√£ x√°c th·ª±c ch·ªØ k√Ω s·ªë</p>
        </div>
      `;
    };
    
    // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c v√† thi·∫øt l·∫≠p interval
    updateCountdown();
    this.countdownInterval = setInterval(updateCountdown, 1000);
  }

  async startLicenseMonitor(licenseInfo, machineId, username) {
    // D·ª´ng gi√°m s√°t c≈© n·∫øu c√≥
    if (this.licenseInterval) {
      clearInterval(this.licenseInterval);
    }
    
    const monitorUrl = "https://script.google.com/macros/s/AKfycbw-DCk41TED43ITI8dYFUvXDZloweK_L-zr4_uZ-pin4LJmw1K4yno0upKg0rHIyIb1/exec";

    this.licenseInterval = setInterval(async () => {
      try {
        console.log("[MONITOR] ƒêang ki·ªÉm tra tr·∫°ng th√°i license...");
        
        const response = await fetch(monitorUrl, {
          method: "POST",
          body: JSON.stringify({
            action: "verifyKey",
            user: username,
            mid: machineId,
            key: licenseInfo.token,
          }),
          headers: { "Content-Type": "application/json" },
        });

        const licenseData = await response.json();
        console.log("[MONITOR] K·∫øt qu·∫£ ki·ªÉm tra:", licenseData);

        const currentTime = Math.floor(Date.now() / 1000);

        // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ server
        if (!licenseData || licenseData.status !== "ok") {
          this.showToast("‚ö†Ô∏è C·∫£nh b√°o: License kh√¥ng h·ª£p l·ªá", "warning");
          setTimeout(() => this.handleLogout(), 5000);
          return;
        }

        // Ki·ªÉm tra ch·ªØ k√Ω s·ªë
        if (!licenseData.signature) {
          this.showToast("‚ùå L·ªói x√°c th·ª±c b·∫£o m·∫≠t", "error");
          setTimeout(() => this.handleLogout(), 3000);
          return;
        }

        // X√°c th·ª±c ch·ªØ k√Ω
        const signatureVerified = await window.electronAPI.verifySignature(licenseData.token, licenseData.signature);
        if (!signatureVerified) {
          this.showToast("‚ùå C·∫£nh b√°o: Ph√°t hi·ªán License gi·∫£ m·∫°o!", "error");
          setTimeout(() => this.handleLogout(), 3000);
          return;
        }

        // Ki·ªÉm tra tr·∫°ng th√°i kh√≥a
        if (licenseData.blocked) {
          this.showToast("‚õî T√†i kho·∫£n ƒë√£ b·ªã kh√≥a b·ªüi Admin", "error");
          setTimeout(() => this.handleLogout(), 3000);
          return;
        }

        // Ki·ªÉm tra th·ªùi h·∫°n
        if (licenseData.exp && Number(licenseData.exp) <= currentTime) {
          this.showToast("‚è∞ License ƒë√£ h·∫øt h·∫°n s·ª≠ d·ª•ng", "warning");
          setTimeout(() => this.handleLogout(), 3000);
          return;
        }

        // C·∫≠p nh·∫≠t th·ªùi gian ƒë·∫øm ng∆∞·ª£c n·∫øu c√≥ thay ƒë·ªïi
        if (licenseData.exp) {
          this.startCountdown(Number(licenseData.exp), licenseData.blocked);
        }
        
        console.log("[MONITOR] License h·ª£p l·ªá - Ti·∫øp t·ª•c ho·∫°t ƒë·ªông");
        
      } catch (error) {
        console.error("[MONITOR] L·ªói gi√°m s√°t:", error);
        // Kh√¥ng ƒëƒÉng xu·∫•t khi m·∫•t k·∫øt n·ªëi, ch·ªâ c·∫£nh b√°o
        this.showToast("‚ö†Ô∏è M·∫•t k·∫øt n·ªëi m√°y ch·ªß - ƒêang th·ª≠ l·∫°i...", "warning");
      }
    }, 30000); // Ki·ªÉm tra m·ªói 30 gi√¢y
  }

  // Gi·ªØ l·∫°i showStatus cho t∆∞∆°ng th√≠ch ng∆∞·ª£c (n·∫øu c√≥ code c√≤n s·ª≠ d·ª•ng)
  showStatus(message, type = "info") {
    this.showToast(message, type);
  }

  hideStatus() {
    // Kh√¥ng c·∫ßn implement v√¨ ƒë√£ d√πng toast
  }
}

// Th√™m CSS cho c√°c hi·ªáu ·ª©ng b·ªï sung
const additionalStyles = document.createElement('style');
additionalStyles.textContent = `
  .status-bar .fas.fa-spinner {
    margin-right: 8px;
  }
  
  .security-badge, .uptime-status {
    font-size: 0.875rem;
  }
  
  .user-welcome {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
  
  .license-info-active, .license-info-expired {
    transition: all 0.3s ease;
  }
  
  .license-info-active:hover, .license-info-expired:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  /* Forgot Password specific styles */
  .forgot-password-info {
    background: rgba(59, 130, 246, 0.1);
    padding: 1rem;
    border-radius: var(--border-radius);
    border: 1px solid rgba(59, 130, 246, 0.2);
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .forgot-password-info i {
    color: #3b82f6;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .forgot-password-info p {
    margin: 0;
    color: var(--gray);
    font-size: 0.875rem;
  }

  /* Enhanced Button Press Effects */
  .btn:active {
    transform: translateY(0) scale(0.98);
    transition: transform 0.1s ease;
  }

  .btn-primary:active {
    box-shadow: 0 2px 8px rgba(37, 99, 235, 0.4);
    background: var(--primary-dark);
  }

  .btn-success:active {
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.4);
    background: #059669;
  }

  .btn-outline:active {
    background: rgba(255, 255, 255, 0.1);
    box-shadow: 0 2px 8px rgba(255, 255, 255, 0.1);
  }

  /* Ripple Effect for Buttons */
  .btn {
    position: relative;
    overflow: hidden;
  }

  .btn::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    transform: translate(-50%, -50%);
    transition: width 0.3s, height 0.3s;
  }

  .btn:active::after {
    width: 100%;
    height: 100%;
  }

  /* Loading state for buttons */
  .btn-loading {
    position: relative;
    color: transparent !important;
  }

  .btn-loading::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    border-radius: 50%;
    animation: button-spin 0.8s linear infinite;
  }

  @keyframes button-spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Toast notification animations */
  .toast-container {
    position: fixed;
    top: 80px;
    right: 20px;
    z-index: 10000;
    max-width: 400px;
  }

  .toast {
    background: var(--dark);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--border-radius);
    padding: var(--spacing-md) var(--spacing-lg);
    margin-bottom: var(--spacing-sm);
    box-shadow: var(--shadow-lg);
    animation: toastSlideIn 0.3s ease-out;
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
  }

  .toast.success {
    border-left: 4px solid var(--success);
  }

  .toast.error {
    border-left: 4px solid var(--danger);
  }

  .toast.warning {
    border-left: 4px solid var(--warning);
  }

  .toast.info {
    border-left: 4px solid var(--primary);
  }

  .toast.loading {
    border-left: 4px solid var(--primary);
  }

  @keyframes toastSlideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  .toast.fade-out {
    animation: toastSlideOut 0.3s ease-in forwards;
  }

  @keyframes toastSlideOut {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  /* Enhanced focus states for accessibility */
  .btn:focus-visible {
    outline: 2px solid var(--primary);
    outline-offset: 2px;
  }

  .input-group input:focus-visible,
  .input-group select:focus-visible {
    outline: 2px solid var(--primary);
    outline-offset: 2px;
  }

  /* Pulse animation for important buttons */
  .btn-pulse {
    animation: pulse-glow 2s infinite;
  }

  @keyframes pulse-glow {
    0% {
      box-shadow: 0 0 0 0 rgba(37, 99, 235, 0.4);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(37, 99, 235, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(37, 99, 235, 0);
    }
  }
`;
document.head.appendChild(additionalStyles);

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener("DOMContentLoaded", () => { 
  if (window.electronAPI) {
    console.log("üöÄ ƒêang kh·ªüi ch·∫°y SecureAuth Pro...");
    window.authApp = new AuthApp();
  } else {
    console.error("‚ùå Electron API kh√¥ng kh·∫£ d·ª•ng");
    document.body.innerHTML = `
      <div class="error-container">
        <div class="error-content">
          <i class="fas fa-exclamation-triangle"></i>
          <h2>L·ªói Kh·ªüi T·∫°o ·ª®ng D·ª•ng</h2>
          <p>Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Electron API. Vui l√≤ng:</p>
          <ul>
            <li>Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng</li>
            <li>Ki·ªÉm tra phi√™n b·∫£n Electron</li>
            <li>Li√™n h·ªá k·ªπ thu·∫≠t n·∫øu l·ªói v·∫´n ti·∫øp di·ªÖn</li>
          </ul>
          <button onclick="window.location.reload()" class="btn btn-primary">
            <i class="fas fa-redo"></i>
            Th·ª≠ L·∫°i
          </button>
        </div>
      </div>
    `;
    
    // Th√™m CSS cho m√†n h√¨nh l·ªói
    const errorStyle = document.createElement('style');
    errorStyle.textContent = `
      .error-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background: linear-gradient(135deg, var(--darker) 0%, var(--dark) 100%);
        padding: 2rem;
      }
      .error-content {
        text-align: center;
        background: rgba(255, 255, 255, 0.08);
        padding: 3rem;
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.12);
        max-width: 500px;
        backdrop-filter: blur(10px);
      }
      .error-content i {
        font-size: 4rem;
        color: #ef4444;
        margin-bottom: 1.5rem;
      }
      .error-content h2 {
        color: #f8fafc;
        margin-bottom: 1rem;
      }
      .error-content p {
        color: #94a3b8;
        margin-bottom: 1.5rem;
      }
      .error-content ul {
        text-align: left;
        color: #94a3b8;
        margin-bottom: 2rem;
      }
      .error-content li {
        margin-bottom: 0.5rem;
      }
    `;
    document.head.appendChild(errorStyle);
  }
});

// X·ª≠ l√Ω l·ªói to√†n c·ª•c
window.addEventListener("error", (event) => { 
  console.error("üí• L·ªói to√†n c·ª•c:", event.error);
  if (window.authApp) {
    window.authApp.showToast("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói ·ª©ng d·ª•ng, vui l√≤ng th·ª≠ l·∫°i", "error");
  }
});